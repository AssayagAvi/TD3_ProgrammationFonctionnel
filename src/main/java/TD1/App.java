/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TD1;

import java.util.List;
import java.util.Set;
import java.util.function.Function;
import java.util.function.Predicate;


public class App {
    public static Predicate<Produit> produitaTVAReduite = p -> p.cat().equals(Categorie.REDUIT);
    public static Predicate<Produit> sup5Euros = p -> p.prix() > 5.0;
    public static Predicate<Commande> doublon = cde -> cde.lignes().size() > 2;
    public static Predicate<Paire<Produit, Integer>> paireTVAReduite = paire -> produitaTVAReduite.test(paire.fst());

    public static Predicate<Paire<Produit, Integer>> genPredicate(int nombreMinAchats) {
        return p -> p.snd() > nombreMinAchats;
    }

    public static final Function<Paire<Produit, Integer>, Double> calcul1 =
            ligneDeCommande -> {
                final Produit produit = ligneDeCommande.fst();
                final double prix_unitaire = produit.prix();
                final double tva = produit.cat().tva();
                final int qte = ligneDeCommande.snd();
                return prix_unitaire * (1 + tva) * qte;
            };

    public static final Function<Paire<Produit, Integer>, Double> calcul2 =
            ligneDeCommande -> {
                final Produit produit = ligneDeCommande.fst();
                final double prix_unitaire = produit.prix();
                final double tva = produit.cat().tva();
                final int qte = ligneDeCommande.snd();
                if (qte > 2){
                    return calcul1.apply(ligneDeCommande) * 0.80;
                }else {
                    return calcul1.apply(ligneDeCommande);
                }
            };



    public static void q1(){
        DAO db = DAO.instance();
        //Produit tva reduite
        Set<Produit> v1 = db.selectionProduits(produitaTVAReduite);
        System.out.println(v1);
    }

    private static void q2(){
        DAO db = DAO.instance();
        //Produit tva reduite coutant plus de 5€
        Set<Produit> v2 = db.selectionProduits(produitaTVAReduite.and(sup5Euros));
        System.out.println(v2);
    }

    private static void q3(){
        DAO db = DAO.instance();
        //Commande non normalisé de + 2 item
        List<Commande> v3  = db.selectionCommande(doublon);
        System.out.println(v3);

    }
    private static void q4(){
        DAO db = DAO.instance();
        //commandes non normalisées 1 produit à TVA réduite commandé en + 2 exemplaire
        List<Commande> v4 = db.selectionCommandeSurExistanceLigne(
                paire -> paireTVAReduite.
                        and(genPredicate(2))
                        .test(paire)
        );
        System.out.println(v4);

    }

    private static void q5(){
        DAO db = DAO.instance();
        //afficher les commandes (sans to string)
        for (Commande cde : db.commandes()) {
            cde.affiche(calcul1);
        }
    }

    private static void q6(){
        DAO db = DAO.instance();
        //afficher les commandes (sans to string)
        for (Commande cde : db.commandes()) {
            cde.affiche(calcul2);
        }
    }


    public static void question21() {
        IPaire<Integer, String> p1 = new Paire<>(1, "un");
        System.out.println(p1);
        IPaire<Double, String> p2 = p1.changeFst(1.0);
        System.out.println(p2);
        IPaire<Double, IPaire<Integer, String>> p3 = p2.changeSnd(p1);
        System.out.println(p3);
    }



    public static void exercice4() {
        DAO data = DAO.instance();
        // commandes (non normalisées puis normalisées)
        for (Commande c : data.commandes()) {
            System.out.println(c);
        }
        for (Commande c : data.commandes()) {
            System.out.println(c.normaliser());
        }
        // produits
        System.out.println(data.produits());
        // produits à TVA réduite (3 versions)
        System.out.println(data.selectionProduits(p -> p.cat() == Categorie.REDUIT));
        System.out.println(data.selectionProduits(p -> App.aTauxReduit(p)));
        System.out.println(data.selectionProduits(App::aTauxReduit));
        // produits à TVA réduite coûtant plus de 5 EUR
        System.out.println(data.selectionProduits(p -> p.cat() == Categorie.REDUIT && p.prix() > 5.0));
        // commandes de plus de 2 items
        System.out.println(data.selectionCommande(c -> c.lignes().size() > 2));
        // commandes contenant au moins un produit à TVA réduite commandé en plus de 2
        // exemplaires
        System.out.println(
                data.selectionCommandeSurExistanceLigne(l -> l.fst().cat() == Categorie.REDUIT && l.snd() > 2));
        // affichage des commandes sans réduction
        for (Commande c : data.commandes()) {
            System.out.println(c.affiche(App::calculSimple));
        }
        // affichage des commandes avec réduction
        for (Commande c : data.commandes()) {
            System.out.println(c.affiche(App::calculReduction));
        }
    }

    public static Boolean aTauxReduit(Produit p) {
        return p.cat() == Categorie.REDUIT;
    }

    /**
     * prix TTC = prix unitaire * (1 + taux TVA) * qté
     */
    public static Double calculSimple(Paire<Produit, Integer> ligne) {
        Produit p = ligne.fst();
        int qte = ligne.snd();
        return p.prix() * (1 + p.cat().tva()) * qte;
    }

    /**
     * réduction = si qté > 2 alors prix unitaire sinon 0 prix TTC = prix unitaire *
     * (1 + taux TVA) * qté - réduction
     */
    public static Double calculReduction(Paire<Produit, Integer> ligne) {
        Double reduction = (ligne.snd() > 2) ? ligne.fst().prix() : 0.0;
        return calculSimple(ligne) - reduction;
    }

    // Refactorisation avec Stream
    public static void q1Bis(){
        DAO db = DAO.instance();
        //Produit tva reduite
        Set<Produit> v1 = db.selectionProduits(produitaTVAReduite);
        System.out.println(v1);
    }

    private static void q2Bis(){
        DAO db = DAO.instance();
        //Produit tva reduite coutant plus de 5€
        Set<Produit> v2 = db.selectionProduits(produitaTVAReduite.and(sup5Euros));
        System.out.println(v2);
    }

    private static void q3Bis(){
        DAO db = DAO.instance();
        //Commande non normalisé de + 2 item
        List<Commande> v3  = db.selectionCommande(doublon);
        System.out.println(v3);

    }
    private static void q4Bis(){
        DAO db = DAO.instance();
        //commandes non normalisées 1 produit à TVA réduite commandé en + 2 exemplaire
        List<Commande> v4 = db.selectionCommandeSurExistanceLigne(
                paire -> paireTVAReduite.
                        and(genPredicate(2))
                        .test(paire)
        );
        System.out.println(v4);

    }

    private static void q5Bis(){
        DAO db = DAO.instance();
        //afficher les commandes (sans to string)
        for (Commande cde : db.commandes()) {
            cde.affiche(calcul1);
        }
    }

    private static void q6Bis(){
        DAO db = DAO.instance();
        //afficher les commandes (sans to string)
        for (Commande cde : db.commandes()) {
            cde.affiche(calcul2);
        }
    }

    public static void main(final String[] args) {

        //exercice4();
        //q1Bis();
        //q1();
        //q2Bis();
        //q2();
        //q3Bis();
        //q3();
        //q4Bis();
        //q4();
        //q5Bis();
        //q5();
        //q6Bis();
        //q6();




    }
}
